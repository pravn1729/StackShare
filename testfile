pragma solidity ^0.4.0;
contract MapTest {

//uint universityMapSequenceId = 100;
struct CertificateContent{
    bytes32 certIdentifier;
    bool revoke;
    bool expired;
}
struct Certificate{
    uint index;
    CertificateContent[] certificates;
    bytes32 studentIdentifier;
}
struct Student{
    uint index;
    address[] students;
    bytes32 batchIdentifier;
    mapping (address=>uint) studentMap;
}
struct Batch{
    uint index;
    address[] batches;
    bytes32 courseIdentifier;
    mapping (address => Student) batchMap;
}
struct Course{
    uint index;
    address[] courses;
    bytes32 instituteIdentifier;
    mapping (address => Batch) courseMap;
}

struct Institute{
   uint index;
   address[] institutes;
   bytes32 univName;
   mapping (address => Course) instituteMap;
  
}
mapping ( address => Institute) public universityMap;
address[]  public universityMapArr;

mapping(address => uint) universityList;
address[] public universityListArr;



// University,Institute,Student
// Remove createUniversity in contract and generate ethereum address for them
// univAddress
function createUniversity(address univAddress, bytes32 _univName) public{ // (address univAddress, bytes _univName)
    // create Ethereum account and register with addUniversity
    // SequenceId or UniqueTicker or EthereumAccountAddress
    var univ = universityMap[univAddress];
    // send event addUniversity(universitySequenceId);
    univ.index = universityMapArr.length;
    univ.univName = _univName;
    universityMapArr.push(univAddress);
    universityList[univAddress] = 1000;
    universityListArr.push(univAddress);
}
function createInstitute(address parentUniv, address instituteAddr, bytes32 _instName) public{ //(address parentUniv, address instituteAddr, bytes32 _instName)
    // create Ethereum account and register with addInstitute
   var univ = universityMap[parentUniv];
   univ.institutes.push(instituteAddr);
   // check if institute exists before
   var inst = univ.instituteMap[instituteAddr];
   inst.index = univ.institutes.length;
   inst.instituteIdentifier = _instName;
}
function createStudent() public{
    // create Ethereum account and register with addStudent
}
    
function isUniExist(address universityAddr) public constant returns(bool){
    if(universityListArr.length == 0) return false;
    return (universityMapArr[universityMap[universityAddr].index] == universityAddr);
}

function getUniversity() public constant returns (uint){
    return universityListArr.length;
}

//function getUniversityt()

}
